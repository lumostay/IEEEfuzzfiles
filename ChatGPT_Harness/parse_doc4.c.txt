
/** @addtogroup parse
    @{
*/

/** @brief Initialize the Parser to parse an XML document.

    @param p is a pointer to the Parser
    @param schema is a pointer to the Schema
    @param data is a pointer to the XML stream
*/
void parse_init(Parser *p, const Schema *schema, char *data);

/** @} */

#include "xml_token.c"

#ifndef HEADER_ONLY

#define unsigned_int(x, data) only (number64 (x, data))

int signed_int(int64_t *y, char *data)
{
    int sign = 1;
    if (*data == '-')
    {
        sign = -1;
        data++;
    }
    return unsigned_int((uint64_t *)y, data) ? *y *= sign, 1 : 0;
}

#define pack_signed(dest, sx, data) \
    (signed_int(&sx, data) ? *dest = sx, 1 : 0)
#define pack_unsigned(dest, ux, data) \
    (unsigned_int(&ux, data) ? *dest = ux, 1 : 0)

int parse_token(Parser *p)
{
    if (!p->need_token)
        return p->token;
    switch ((p->token = xml_token(p->xml)))
    {
    case XML_INVALID:
        p->state = PARSE_INVALID;
        return XML_INVALID;
    case XML_INCOMPLETE:
        p->ptr = (uint8_t *)p->xml->content;
        return XML_INCOMPLETE;
    default:
        p->need_token = 0;
        return p->token;
    }
}

int parse_text(Parser *p)
{
    switch (parse_token(p))
    {
    case XML_TEXT:
        p->ptr = (uint8_t *)p->xml->content;
        p->need_token = 1;
        break;
    case END_TAG:
        p->ptr = "";
        break;
    default:
        return 0;
    }
    return 1;
}

int parse_hex(uint8_t *value, int n, char *data)
{
    int x, m = 0, c, d;
    //while (c != '\0' && !ws (c)) {
    while (c = hex_digit(d = *data))
    {
        if (m == n)
            return 0;
        data++;
        x = (d - c) << 4;
        if (c = hex_digit(d = *data++))
            value[m++] = x | (d - c);
        else
            return 0;
    }
    if (!m || !only(data))
        return 0;
    if (n -= m)
    {
        memmove(value + n, value, m);
        memset(value, 0, n);
    }
    return 1;
}

int parse_value(Parser *p, void *value)
{
    int64_t sx;
    uint64_t ux;
    int type = p->se->xs_type;
    char *data = (char *)p->ptr;
    int n = type >> 4;
    switch (type & 0xf)
    {
    case XS_STRING:
        if (n)
        {
            if (strlen(data) > n - 1)
                return 0;
            strcpy(value, data);
        }
        else
            *(char **)(value) = strdup(data);
        return 1;
    case XS_BOOLEAN: